import sys

# Импортируем из PyQt5.QtWidgets классы для создания приложения и виджет
from PyQt5.QtWidgets import QApplication, QWidget, QPushButton, QInputDialog, QMessageBox, QGridLayout
from PyQt5.QtWidgets import QCheckBox, QLabel, QLineEdit, QLCDNumber, QTableView, QMainWindow, QScrollArea
from PyQt5.QtGui import QPainter, QColor
from PyQt5.QtSql import *
import csv

# Константа-словарь, для превода английских слов (предложений)
# в азубуку Морзе 
words_morz_en = {'a': '.-', 'b': '-...', 'c': '-.-.', 'd': '-..',
			  'e': '.', 'f': '..-.', 'g': '--.', 'h': '....',
			  'i': '..', 'j': '.---', 'k': '-.-', 'l': '.-..',
			  'm': '--', 'n': '-.', 'o': '---', 'p': '.--.',
			  'q': '--.-', 'r': '.-.', 's': '...', 't': '-',
			  'u': '..-', 'v': '...-', 'w': '.--', 'x': '-..-',
			  'y': '-.--', 'z': '--..'}

# Константа-словарь, для превода русских слов (предложений)
# в азубуку Морзе
words_morz_ru = {'а': '.-', 'б': '-...', 'в': '.--', 'г': '--.',
				 'д': '-..', 'е': '.', 'ж': '...-', 'з': '--..',
				 'и': '..', 'й': '.---', 'к': '-.-', 'л': '.-..',
				 'м': '--', 'н': '-.', 'о': '---', 'п': '.--.',
				 'р': '.-.', 'с': '...', 'т': '-', 'у': '..-',
				 'ф': '..-.', 'х': '....', 'ц': '-.-.', 'ч': '---.',
				 'ш': '----', 'щ': '--.-', 'ь': '-..-', 'ы': '-.--',
				 'э': '..--..', 'ю': '..--', 'я': '.-.-', ' ': ' '}

# Создадим список, в котором будем хранить нашу раскалдку.
# С помощью этого списка будем скрывать или показывать раскладку
BUTTONS = []

# Отнаследуем наш класс от простейшего графического примитива QWidget
class MainWidget(QMainWindow):
    def __init__(self):
        # Надо не забыть вызвать инициализатор базового класса
        super().__init__()
        # В метод initUI() будем выносить всю настройку интерфейса, 
        # чтобы не перегружать инициализатор
        # Также добавим базу данных для собственного словаря пользователя
        # и для истории переводов
        self.db_for_history = DataBase('history.csv')
        self.db_for_ABC = DataBase('ownABC.csv')
        self.USER_TEXT = ''
        self.initUI()

    def initUI(self):
        # Зададим размер и положение нашего виджета, 
        self.setGeometry(300, 300, 700, 300)
        # А также его заголовок
        self.setWindowTitle('Вычисление выражений')

        # Add a button & it setting
        # Создадим раскалдку (клавиатуру) на международном языке
        key_words = words_morz_en.keys()
        x, y = 5, 5
        for i in key_words:
        	o = QPushButton(i, self)
        	o.resize(30, 30)
        	o.move(x, y)
        	o.clicked.connect(self.click)
        	x += 25
        	BUTTONS.append(o)

        # Создадим кнопки, с помоью которых будем отправлять тот или иной сигнал

        # ----------------------------------------------------------------------
        
        # Кнопка для изменения нашего словаря  
       	btn_change_abc = QPushButton('Изменить', self)
       	btn_change_abc.resize(100, 20)
       	btn_change_abc.move(490, 175)
       	btn_change_abc.clicked.connect(self.change_own_ABC)

       	# Кнопка для создания (добавления) собственного словаря
        btn_create_alfpabet = QPushButton('Создать', self)
        btn_create_alfpabet.resize(100, 20)
        btn_create_alfpabet.move(380, 175)
        btn_create_alfpabet.clicked.connect(self.append_in_own_ABC)

        # Кнопка для просмотра истории переводов
        btn_show_history = QPushButton('History', self)
        btn_show_history.resize(100, 30)
        btn_show_history.move(126, y + 130)
        btn_show_history.clicked.connect(self.show_history)

        # Кнопка для очищения поля ввода пользователя
        btn_clear = QPushButton('Clear', self)
        btn_clear.resize(100, 30)
        btn_clear.move(4, y + 130)
        btn_clear.clicked.connect(self.for_btn_clear)

        # Кнопка для обозначающая пробел в поле ввода пользователя
        self.btn_space = QPushButton('SPACE', self)
        self.btn_space.resize(655, 30)
        self.btn_space.move(5, y + 27)
        self.btn_space.clicked.connect(self.click)

        # Кнопка для перевода русского предложения (слова) в азбуку Морзе
        btn_translate = QPushButton('-> Русский <-', self)
        btn_translate.resize(130, 40)
        btn_translate.move(4, y + 180)
        btn_translate.clicked.connect(self.on_russia_dialog)

        # Кнопка для перевода английского предложения (слова) в азбуку Морзе
        btn_translate_input = QPushButton('Перевести', self)
        btn_translate_input.resize(100, 30)
        btn_translate_input.move(230, y + 64)
        btn_translate_input.clicked.connect(self.click_translate_btn)

        # Добавим еще одну для перевода, но уже для словаря пользователя
        btn_translate_own_ABC = QPushButton('Пере\nвести', self)
        btn_translate_own_ABC.resize(60, 42)
        btn_translate_own_ABC.move(530, 196)
        btn_translate_own_ABC.clicked.connect(self.for_btn_translate_own_ABC)

        # Добавим возможность переключаться между реально клавиатурой и сенсорной
        # при помощи кнопки
        self.btn_change_keyboard = QPushButton('Переключиться на\n клавиатуру', self)
        self.btn_change_keyboard.resize(130, 30)
        self.btn_change_keyboard.move(230, y + 96)
        self.btn_change_keyboard.clicked.connect(self.change_keyboard)

        btn_clear_data_own_ABC = QPushButton('Очистить данные словаря', self)
        btn_clear_data_own_ABC.resize(211, 25)
        btn_clear_data_own_ABC.move(379, 239)
        btn_clear_data_own_ABC.clicked.connect(self.clear_data_own_ABC)


       	# Создадим поля для ввода пользователя и поля для 
       	# вывода переводов

       	# -----------------------------------------------

       	# Поле для ввода пользователя (английский язык)
       	self.input_show = QLineEdit(self)
       	self.input_show.resize(220, 30)
       	self.input_show.move(5, y + 65)
       	self.input_show.setReadOnly(True)

       	# Поле для вывода введенного предложения (слова) пользователя
       	# Также сделаем его невозможным для изменений (английский язык)
       	self.output = QLineEdit(self)
       	self.output.resize(220, 30)
       	self.output.move(5, y + 95) 
       	self.output.setReadOnly(True)

       	# Поле для отображения введенного предложения (слова) на русском
       	self.russian_word = QLineEdit(self)
       	self.russian_word.resize(150, 20)
       	self.russian_word.move(135, 186)
       	self.russian_word.setReadOnly(True)

       	# Поле для отображения введенного предложения (слова) в азубке Морзе
       	self.translation_from_russian = QLineEdit(self)
       	self.translation_from_russian.resize(150, 20)
       	self.translation_from_russian.move(135, 205)
       	self.translation_from_russian.setReadOnly(True)

       	# Поле для перевода на собственный словарт введенного слова(предложения)
       	self.input_own_ABC = QLineEdit(self)
       	self.input_own_ABC.resize(150, 20)
       	self.input_own_ABC.move(380, 197)

       	# Поле для вывода переведенного слова(предложения) на собственный словарь
       	self.output_own_ABC = QLineEdit(self)
       	self.output_own_ABC.resize(150, 20)
       	self.output_own_ABC.move(380, 217)
       	self.output_own_ABC.setReadOnly(True)

       	# Добавим счетчик, отслеживающий количесвто введенных букв
       	# --------------------------------------------------------
       	# на английской раскладке, которую мы добавляли
       	self.count = 0
       	self.counter = QLCDNumber(self)
       	self.counter.resize(200, 50)
       	self.counter.move(460, y + 65)

       	# Создадим Лейблы с говорящими надписями для ориентировки на виджете
       	label_your_abc = QLabel('Ваш словарь:', self)
       	label_your_abc.move(455, 150)

       	label_letters = QLabel('Letters: ', self)
       	label_letters.move(480, 70)

       	self.label_for_info_keyboard = QLabel('Вы используете\nклавиатуру!', self)
       	self.label_for_info_keyboard.move(275, 20)
       	self.label_for_info_keyboard.hide()


    # Создадим функции, которые будут срабатывать после нажатия на ту или иную кнопку
    # -------------------------------------------------------------------------------
    # Зададим функцию, которая будет срабатывать при нажатии на кнопку перевести
    # с английского в азбуку Морзе
    def click_translate_btn(self):
        text = self.input_show.text()
        output_text = ''
        for letter in text:
            if letter == ' ':
                output_text += ' '
            elif letter.lower() not in words_morz_en:
                error = QMessageBox.critical(self, 'ОШИБКА!', "Используйте только буквы!")
                self.for_btn_clear()
                self.count = 0
                text = ''
                break
            else:
                self.count += 1
                output_text += words_morz_en[letter.lower()]
                self.output.setText(output_text)
        self.counter.display(self.count)

    # Функция для имзенения собственного словаря пользователя
    def change_own_ABC(self):
    	# При нажатии "Изменить" вызовем диалоговое окно, которая будет запрашивать букву,
    	# у которой пользователь хочет изменить символ
        letter, ok_pressed = QInputDialog.getText(self, 'Cheange Own ABC', 'Letter:')
        # После нажатия "ОК" в диалоговм окне вызовем еще одно
        # диалоговое окно для запращивания нового символа, которое будет обозначать ту или иную букву
        if ok_pressed:
            symbol, ok_pressed1 = QInputDialog.getText(self, 'Own ABC', 'Symbol:')
            if ok_pressed1:
            	# Проверим, есть ли такая буква в словаре
            	# чтобы мы могла ее изменить
                if self.db_for_ABC.check_in_ABC_letter(letter):
                	# Не нашлась такая буква - Выведем окно с ошибкой
                    error = QMessageBox.critical(self, 'ОШИБКА!', f'Letter: {letter}\nТакой буквы нет в вашем словаре!')
                # Проверим также, не принадлежит ли символ, который мы хотим присвоить букве, другой букве
                elif not self.db_for_ABC.check_no_reply(symbol):
                	# Принадлежит - Выводим ошибку
                	error = QMessageBox.critical(self, 'ОШИБКА!', f'Symbol: {symbols}\nТакой символ уже присвоен другой букве!')
                else:
                	# Введенный символ не присвоен другим буквам и буква есть 
                	# в словаре пользователя, тогда
                	# изменим символ введенной буквы на новый
                	self.db_for_ABC.change_letter(letter, symbol)

    # Функция, вызывающая новое окно, в котором будет отображаться история переводов
    def show_history(self):
        self.history = History()
        self.history.show()

    # Создадим функцию для добавления "новая буква - символ" в собаственный словарь пользователя
    def append_in_own_ABC(self):
    	# Так же запросим букву и символ для буквы, как в функции change_own_ABC()
        letter, ok_pressed = QInputDialog.getText(self, 'Creating own ABC', 'letter:')
        if ok_pressed:
            symbol, ok_pressed1 = QInputDialog.getText(self, 'Own ABC', 'Symbol:')
            if ok_pressed1:
            	# Проверим, добавляет ползователь новую букву или уже существующую
                if not self.db_for_ABC.check_in_ABC_letter(letter):
                	# Если существующую - выведем ошибку
                    error = QMessageBox.critical(self, 'ОШИБКА!', f'Letter: {letter}\nУже есть в списке. Используйте кнопку "Изменить"')
                elif not self.db_for_ABC.check_no_reply(symbol):
                	# Символ для буквы уже существует - Выводим ошибку
                	error = QMessageBox.critical(self, 'ОШИБКА!', f'Symbol: {symbols}\nТакой символ уже присвоен другой букве!')
                else:
                	# Все прошло успешно - добавляем в нашу базу данных "буква;символ"
                    self.db_for_ABC.append_data(letter, symbol)

    def on_russia_dialog(self):
        word, ok_pressed = QInputDialog.getText(self, 'Russia', 'Russian word:')

        if ok_pressed:
            if self.check_language(word):
                self.russian_word.setText(word)
                text = ''
                for i in word:
                    if i == ' ':
                        text += ' '
                    else:
                        text += words_morz_ru[i.lower()]
                        self.translation_from_russian.setText(text)
                self.db_for_history.append_data(word, text)
            else:
                self.russian_word.setText('Error')
                self.translation_from_russian.setText('')
                self.db_for_history.append_data(word, 'error')

    def check_language(self, word):
        letters = words_morz_ru.keys()
        for letter in word:
            if letter not in letters:
                return False
        return True

    # Создадим функцию и свяжем ее с кнопкой перевода self.output_own_ABC
    def for_btn_translate_own_ABC(self):
      text_from_line = self.input_own_ABC.text()
      letters = self.db_for_ABC.letters_in_ABC()
      dict_own_ABC = self.db_for_ABC.return_dict_ABC()
      text_output = ''

      for letter in text_from_line:
          if letter == ' ':
              text_output += ' '
          elif letter not in letters:
              error = QMessageBox.critical(self, 'ОШИБКА!', f"Letter: {letter}\nТакой буквы нет в вашем списке.\nЧтобы добавить ее, нажмите кнопку 'Добавить'")
              self.output_own_ABC.setText('error')
              break
          else:
              text_output += dict_own_ABC[letter]
      self.output_own_ABC.setText(text_output)
      self.db_for_history.append_data(text_from_line, 'error')

    	# ДОДЕЛАТЬ!!!

    def for_btn_clear(self):
        symbols = self.output.text()
        letters = self.input_show.text()
        if letters and symbols:
            self.db_for_history.append_data(letters, symbols)
            self.output.setText('')
            self.input_show.setText('')
            self.count = 0
            self.counter.display(self.count)

    def click(self):
   	    letter_from_btn = self.sender().text()
   	    text = self.input_show.text()
   	    text_in_line = self.output.text()
   	    if letter_from_btn == 'SPACE':
   	    	letter = ' '
   	    else:
   	    	self.count += 1
   	    	letter = words_morz_en[letter_from_btn]
   	    	self.output.setText(text_in_line + letter)
   	    	self.input_show.setText(text + letter_from_btn)
   	    self.counter.display(self.count)

   	    # разобраться с self.USER_TEXT

    def change_keyboard(self):
   	    text_from_btn = self.btn_change_keyboard.text()
   	    if text_from_btn == 'Переключиться на\n клавиатуру':
   	        for btn in BUTTONS:
   	            btn.hide()
   	        self.btn_space.hide()
   	        self.label_for_info_keyboard.show()
   	        self.btn_change_keyboard.setText('Переключиться на\n раскладку')
   	        self.input_show.setReadOnly(False)

   	    if text_from_btn == 'Переключиться на\n раскладку':
   	        for btn in BUTTONS:
   	            btn.show()
   	        self.btn_space.show()
   	        self.label_for_info_keyboard.hide()
   	        self.btn_change_keyboard.setText('Переключиться на\n клавиатуру')
   	        self.input_show.setReadOnly(True)

    def clear_data_own_ABC(self):
        self.db_for_ABC.clear_db()
        msg = QMessageBox(self)
        msg.setIcon(QMessageBox.Information)
        msg.setText("Изменение Истории")
        msg.setInformativeText("История успешно отчищена!")
        msg.show()


# Создадим класс для работы с базой данных
class DataBase():
    def __init__(self, path):
    	# Иницилизируем путь к файлу, где будет происходить
    	# работа с БД
        self.path = path

    # Создадим функцию, которая будет возращать данные из БД в виде списка
    def reader_file(self):
        read = []
        with open(self.path, encoding="utf8") as csvfile:
            reader = csv.reader(csvfile, delimiter=';', quotechar='"')

            for line in reader:
                read.append(line)
        return read

    # Создадим функцию, которая будет нам возращать все буквы словаря пользователя
    def letters_in_ABC(self):
    	reader = self.reader_file()
    	letters = []
    	for read in reader:
    		letters.append(read[0])
    	return letters

    # Фунция, возвращающая список символов в словаре
    def symbols_in_ABC(self):
      reader = self.reader_file()
      symbols = []
      for read in reader:
          symbols.append(read[1])
      return symbols

    # Функция, которая добавлят данные в csv файл
    def append_data(self, word, translation):
    	with open(self.path, 'a', newline='', encoding='utf8') as csvfile:
    		writer = csv.writer(csvfile, delimiter=';', quotechar='"', quoting=csv.QUOTE_MINIMAL)
    		writer.writerow([word, translation])

    # Создадим функцию, с помощью которой будем менять словарь пользователя
    def change_letter(self, letter, symbol):
        reader = self.reader_file()

        for read in reader:
            if read[0] == letter:
                read[-1] = symbol

        with open(self.path, 'w', newline='', encoding='utf8') as csvfile:
            writer = csv.writer(csvfile, delimiter=';', quotechar='"', quoting=csv.QUOTE_MINIMAL)
            for read in reader:
                letter = read[0]
                symbol = read[1]
                writer.writerow([letter, symbol])
    				
    # Создадим функцию, которая будет отчищать БД
    def clear_db(self):
        file = open(self.path, 'w')
        file.close()

    # Создадим функцию для проверки наличия символов в словаре пользователя
    def check_no_reply(self, symbol):
        reader = self.reader_file()
        for symbol in reader:
        	if symbol[1] == symbol:
        		return False
        return True

    # Функция, возвращающая нам словарь, где ключ - буквы, значение - символ буквы
    # Она, функция, понадобится для упрощения работы с переводом
    def return_dict_ABC(self):
        letters = self.letters_in_ABC()
        symbols = self.symbols_in_ABC()
        return dict(zip(letters, symbols))

    # Зададим функцию, которая будет проверять наличие букв в словаре пользователя
    def check_in_ABC_letter(self, letter):
        letters = self.letters_in_ABC()
        for i in letters:
            if letter == i:
              # Если буква уже есть в словаре - возвращаем False
                return False
        # Если нет - возвращаем True
        return True


# Создадим класс для отображения истории переводов пользователя
# в новом окне, чтобы было нагляднее
class History(QWidget):
    def __init__(self):
        super().__init__()
        # Создадим переменную  в которую добавим БД с историей перевеодов
        self.db = DataBase('history.csv')
        self.initUI()

    def initUI(self):
        self.setGeometry(300, 300, 700, 700)
        # А также его заголовок
        self.setWindowTitle('История')

        # Получаем всю историю и срезаем ее до 15-го элемента,чтобы история
        # умещалась в наше окно
        history = self.db.reader_file()
        history = history[:15]
        y = 5

        # Начинаем отображение истории переводов
        # Добавим слово в Label, а перевод в QLineEdit, для более красивого оформления
        for word, symbol in history:
          symbol_line = QLineEdit(self)
          symbol_line.setText(symbol)
          symbol_line.resize(150, 20)
          symbol_line.move(150, y)
          symbol_line.setReadOnly(True)
          word_label = QLabel(f'word:    {word}   |--->   ', self)
          word_label.move(5, y)
          y += 30

        # Также добавим кнопку для отчистки истории
        # (Вдруг пользователь имеет секреты)
       	btn_clear = QPushButton('Clear History', self)
        btn_clear.resize(100, 30)
        btn_clear.move(5, y)
        btn_clear.clicked.connect(self.clicked_clear)

    # Подключим к кнопке отчиски истории функцию, выводящую на экран
    # сообщени, что история отчищена
    def clicked_clear(self):
        self.db.clear_db()
        msg = QMessageBox(self)
        msg.setIcon(QMessageBox.Information)
        msg.setText("Изменение Истории")
        msg.setInformativeText("История успешно отчищена!")
        msg.show()


if __name__ == '__main__':
    # Создадим класс приложения PyQT
    app = QApplication(sys.argv)
    # А теперь создадим и покажем пользователю экземпляр 
    # нашего виджета класса Example
    ex = MainWidget()
    ex.show()
    # Будем ждать, пока пользователь не завершил исполнение QApplication, 
    # а потом завершим и нашу программу
    sys.exit(app.exec())
